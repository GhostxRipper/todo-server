scalar Token

input ConnectionInput {
  username: String!
  password: String!
}

type ConnectionPayload {
  viewer: User
  token: Token!
}

type Mutation {
  login(input: ConnectionInput!): ConnectionPayload
  register(input: ConnectionInput!): ConnectionPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection
type PageInfo {
  # When paginating forwards, are there more items
  hasNextPage: Boolean!
  # When paginating backwards, are there more items
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue
  startCursor: String
  # When paginating forwards, the cursor to continue
  endCursor: String
}

type Query {
  viewer: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  todos(after: String, first: Int, before: String, last: Int): TodoConnection
}

type Todo implements Node {
  # The ID of an object
  id: ID!
  text: String
  complete: Boolean
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodoEdge]
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  # The ID of an object
  id: ID!
  username: String!
}
